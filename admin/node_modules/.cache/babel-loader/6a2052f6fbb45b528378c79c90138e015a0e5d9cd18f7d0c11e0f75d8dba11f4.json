{"ast":null,"code":"import { apiKey, baseURL } from \"../utils\";\nimport auth from \"./auth\";\nconst citiesFunctions = {\n  async getcities() {\n    try {\n      const response = await fetch(`${baseURL}v1/cities/?api_key=${apiKey}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"GET\"\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      throw error;\n    }\n  },\n  async addCity(name, region) {\n    const city = {\n      name: name,\n      region: region\n    };\n    try {\n      const response = await fetch(`${baseURL}v1/cities/add`, {\n        body: JSON.stringify(city),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${auth.token}`\n        },\n        method: \"POST\"\n      });\n      const result = await response.json();\n      console.log(result.message);\n      if (result.status === 'success') {\n        return \"ok\";\n      } else if (result.message === 'city exists') {\n        return result.message;\n      } else {\n        return \"Unexpected error occurred.\";\n      }\n    } catch (error) {\n      console.error(\"Error fetching cities:\", error);\n      throw error;\n    }\n  }\n};\nexport default citiesFunctions;","map":{"version":3,"names":["apiKey","baseURL","auth","citiesFunctions","getcities","response","fetch","headers","method","ok","Error","status","result","json","error","console","addCity","name","region","city","body","JSON","stringify","token","log","message"],"sources":["/home/lutfia/Private_projects/vteam07/admin/src/modules/citiesFunctions.ts"],"sourcesContent":["import { apiKey, baseURL } from \"../utils\";\r\nimport auth from \"./auth\"\r\n\r\ninterface City {\r\n    id?: number;\r\n    name: string;\r\n    region: string;\r\n}\r\n\r\ninterface CitiesResponse {\r\n    status: string;\r\n    cities: City[];\r\n    message: string;\r\n}\r\n\r\nconst citiesFunctions = {\r\n    async getcities(): Promise<CitiesResponse> {\r\n        try {\r\n            const response = await fetch(`${baseURL}v1/cities/?api_key=${apiKey}`, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                method: \"GET\",\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n            return result as CitiesResponse;\r\n        } catch (error) {\r\n            console.error(\"Error fetching cities:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n    async addCity(name:string, region:string): Promise<string>{\r\n        const city: City = {\r\n            name: name,\r\n            region: region,\r\n          };\r\n      \r\n        try {\r\n            const response = await fetch(`${baseURL}v1/cities/add`, {\r\n                body:JSON.stringify(city),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": `Bearer ${auth.token}`\r\n                },\r\n                \r\n                method: \"POST\",\r\n            });\r\n           \r\n\r\n            const result = await response.json();\r\n            console.log(result.message);\r\n\r\n            if (result.status === 'success') {\r\n                return \"ok\";\r\n              } else if (result.message === 'city exists') {\r\n                \r\n                \r\n                return result.message;\r\n              } else {\r\n                return \"Unexpected error occurred.\";\r\n              }\r\n            \r\n        } catch (error) {\r\n            console.error(\"Error fetching cities:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\nexport default citiesFunctions;"],"mappings":"AAAA,SAASA,MAAM,EAAEC,OAAO,QAAQ,UAAU;AAC1C,OAAOC,IAAI,MAAM,QAAQ;AAczB,MAAMC,eAAe,GAAG;EACpB,MAAMC,SAASA,CAAA,EAA4B;IACvC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,sBAAsBD,MAAM,EAAE,EAAE;QACnEO,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBL,QAAQ,CAACM,MAAM,EAAE,CAAC;MAC7D;MAEA,MAAMC,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpC,OAAOD,MAAM;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ,CAAC;EACD,MAAME,OAAOA,CAACC,IAAW,EAAEC,MAAa,EAAkB;IACtD,MAAMC,IAAU,GAAG;MACfF,IAAI,EAAEA,IAAI;MACVC,MAAM,EAAEA;IACV,CAAC;IAEH,IAAI;MACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,eAAe,EAAE;QACpDmB,IAAI,EAACC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QACzBZ,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAUL,IAAI,CAACqB,KAAK;QACzC,CAAC;QAEDf,MAAM,EAAE;MACZ,CAAC,CAAC;MAGF,MAAMI,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCE,OAAO,CAACS,GAAG,CAACZ,MAAM,CAACa,OAAO,CAAC;MAE3B,IAAIb,MAAM,CAACD,MAAM,KAAK,SAAS,EAAE;QAC7B,OAAO,IAAI;MACb,CAAC,MAAM,IAAIC,MAAM,CAACa,OAAO,KAAK,aAAa,EAAE;QAG3C,OAAOb,MAAM,CAACa,OAAO;MACvB,CAAC,MAAM;QACL,OAAO,4BAA4B;MACrC;IAEN,CAAC,CAAC,OAAOX,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC;AAED,eAAeX,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}