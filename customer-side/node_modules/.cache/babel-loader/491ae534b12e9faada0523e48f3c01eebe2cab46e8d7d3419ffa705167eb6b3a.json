{"ast":null,"code":"// Importera dina verktyg\nimport { baseURL } from \"../utils\";\n\n// Definiera typer fÃ¶r API-respons\n\n// Auth-modulen\nconst auth = {\n  token: \"\",\n  // Typa login-metoden\n  async login(username, password) {\n    const user = {\n      email: username,\n      password: password\n    };\n    const response = await fetch(`${baseURL}v1/user/login`, {\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    });\n    const result = await response.json();\n    if (result.message === 'Auth failed') {\n      return result.message;\n    } else if (result.message === 'Auth successful') {\n      this.token = result.token;\n      console.log(this.token);\n      return \"ok\";\n    } else {\n      return \"Unexpected error occurred.\";\n    }\n  },\n  // Typa register-metoden\n  async register(username, password, email, role, phone) {\n    const user = {\n      email: email,\n      password_hash: password,\n      name: username,\n      role: role,\n      phone: phone\n    };\n    console.log(\"userdata\", user);\n    console.log(\"baseurl\", baseURL);\n    const response = await fetch(`${baseURL}v1/user/add`, {\n      body: JSON.stringify(user),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\"\n    });\n    const result = await response.json();\n    console.log(result);\n    if (result.message === 'User already exists') {\n      return result.message;\n    } else if (result.message === 'User created') {\n      return \"ok\";\n    } else {\n      return \"Unexpected error occurred.\";\n    }\n  }\n};\nexport default auth;","map":{"version":3,"names":["baseURL","auth","token","login","username","password","user","email","response","fetch","body","JSON","stringify","headers","method","result","json","message","console","log","register","role","phone","password_hash","name"],"sources":["/home/lutfia/Private_projects/vteam07/customer-side/src/modules/auth.ts"],"sourcesContent":["// Importera dina verktyg\r\nimport { apiKey, baseURL } from \"../utils\";\r\n\r\n// Definiera typer fÃ¶r API-respons\r\ninterface ApiResponse<T> {\r\n  data?: T;\r\n  message?: string;\r\n  token: string;\r\n  errors?: {\r\n    detail: string;\r\n  };\r\n}\r\n\r\ninterface AuthData {\r\n  token: string;\r\n}\r\ninterface UserCredentials {\r\n  email: string;\r\n  password_hash: string;\r\n  role: string;\r\n  name: string;\r\n  phone: string;\r\n}\r\n\r\ninterface UserCredentialsLogin {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\n\r\n// Auth-modulen\r\nconst auth = {\r\n  token: \"\",\r\n\r\n  // Typa login-metoden\r\n  async login(username: string, password: string): Promise<string> {\r\n    const user: UserCredentialsLogin = {\r\n      email: username,\r\n      password: password,\r\n      \r\n    };\r\n\r\n    const response = await fetch(`${baseURL}v1/user/login`, {\r\n      body: JSON.stringify(user),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n\r\n    const result: ApiResponse<AuthData> = await response.json();\r\n\r\n    if (result.message === 'Auth failed') {\r\n      return result.message;\r\n    } else if (result.message === 'Auth successful') {\r\n      \r\n      this.token = result.token;\r\n      console.log(this.token);\r\n      return \"ok\";\r\n    } else {\r\n      return \"Unexpected error occurred.\";\r\n    }\r\n\r\n\r\n  },\r\n\r\n  // Typa register-metoden\r\n  async register(username: string, password: string, email: string, role: string, phone:string): Promise<string> {\r\n    const user: UserCredentials = {\r\n      email: email,\r\n      password_hash: password,\r\n      name: username,\r\n      role: role,\r\n      phone: phone,\r\n    };\r\n\r\n    console.log(\"userdata\",user);\r\n    console.log(\"baseurl\", baseURL);\r\n    const response = await fetch(`${baseURL}v1/user/add`, {\r\n      body: JSON.stringify(user),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      method: \"POST\",\r\n    });\r\n\r\n    const result: ApiResponse<AuthData> = await response.json();\r\n     console.log(result);\r\n    if (result.message === 'User already exists') {\r\n      return result.message;\r\n    } else if (result.message === 'User created') {\r\n      \r\n      return \"ok\";\r\n    } else {\r\n      return \"Unexpected error occurred.\";\r\n    }\r\n  },\r\n};\r\n\r\nexport default auth;"],"mappings":"AAAA;AACA,SAAiBA,OAAO,QAAQ,UAAU;;AAE1C;;AA2BA;AACA,MAAMC,IAAI,GAAG;EACXC,KAAK,EAAE,EAAE;EAET;EACA,MAAMC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAmB;IAC/D,MAAMC,IAA0B,GAAG;MACjCC,KAAK,EAAEH,QAAQ;MACfC,QAAQ,EAAEA;IAEZ,CAAC;IAED,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,eAAe,EAAE;MACtDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;MAC1BO,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,MAA6B,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAE3D,IAAID,MAAM,CAACE,OAAO,KAAK,aAAa,EAAE;MACpC,OAAOF,MAAM,CAACE,OAAO;IACvB,CAAC,MAAM,IAAIF,MAAM,CAACE,OAAO,KAAK,iBAAiB,EAAE;MAE/C,IAAI,CAACf,KAAK,GAAGa,MAAM,CAACb,KAAK;MACzBgB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACjB,KAAK,CAAC;MACvB,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,4BAA4B;IACrC;EAGF,CAAC;EAED;EACA,MAAMkB,QAAQA,CAAChB,QAAgB,EAAEC,QAAgB,EAAEE,KAAa,EAAEc,IAAY,EAAEC,KAAY,EAAmB;IAC7G,MAAMhB,IAAqB,GAAG;MAC5BC,KAAK,EAAEA,KAAK;MACZgB,aAAa,EAAElB,QAAQ;MACvBmB,IAAI,EAAEpB,QAAQ;MACdiB,IAAI,EAAEA,IAAI;MACVC,KAAK,EAAEA;IACT,CAAC;IAEDJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAACb,IAAI,CAAC;IAC5BY,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEnB,OAAO,CAAC;IAC/B,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,aAAa,EAAE;MACpDU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC;MAC1BO,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,MAA6B,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAC1DE,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC;IACpB,IAAIA,MAAM,CAACE,OAAO,KAAK,qBAAqB,EAAE;MAC5C,OAAOF,MAAM,CAACE,OAAO;IACvB,CAAC,MAAM,IAAIF,MAAM,CAACE,OAAO,KAAK,cAAc,EAAE;MAE5C,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,4BAA4B;IACrC;EACF;AACF,CAAC;AAED,eAAehB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}